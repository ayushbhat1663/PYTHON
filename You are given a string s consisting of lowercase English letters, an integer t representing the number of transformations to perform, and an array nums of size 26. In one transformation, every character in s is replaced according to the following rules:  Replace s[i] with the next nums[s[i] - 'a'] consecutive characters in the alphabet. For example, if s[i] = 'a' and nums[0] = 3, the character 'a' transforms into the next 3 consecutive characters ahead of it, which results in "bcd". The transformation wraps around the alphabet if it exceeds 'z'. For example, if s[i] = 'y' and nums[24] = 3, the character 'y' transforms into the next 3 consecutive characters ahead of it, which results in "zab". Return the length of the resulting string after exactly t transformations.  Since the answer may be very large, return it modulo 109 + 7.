class Solution:
    def lengthAfterTransformations(self, s: str, t: int, nums: List[int]) -> int:
        # Step 1: Build transition matrix T
        T = [[0] * ALPHABET for _ in range(ALPHABET)]
        for c in range(ALPHABET):
            for shift in range(1, nums[c] + 1):
                T[(c + shift) % ALPHABET][c] += 1

        # Step 2: Raise T to the power t
        Tt = mat_pow(T, t)

        # Step 3: Count the initial frequency of each character in s
        freq = Counter(s)
        result = 0

        # Step 4: Calculate the total number of characters after t transformations
        for ch, cnt in freq.items():
            col = ord(ch) - ord('a')
            col_sum = sum(Tt[row][col] for row in range(ALPHABET)) % MOD
            result = (result + cnt * col_sum) % MOD

        return result
