class Solution:
    def subsetXORSum(self, nums: List[int]) -> int:
        res=[]  
        def backtrack(start,arr,l):
            x=0
            for i in l:
                x=x^i   # creating xor values if list
            res.append(x) # appending to the result


            for i in range(start,len(arr)):
                l.append(arr[i])    # we don't need duplicate so we initialize from start
                backtrack(i+1,arr,l) # update through i+1(which removes duplicate)
                l.pop()  # for next values to get new ways we need to remove old value

            
               
        backtrack(0,nums,[])
        return sum(res)
        
